
1. login to AWS

2. create a VPC( choose VPC and more), get the information of VPC and Subnets
in case you have public subnets do make sure to edit the subnets to allow auto
ipv4 allocation

3. update the information in the cluster folder


4. To create clusters run:
  eksctl create cluster -f clusters/cluster1.yaml --profile adfs
  eksctl create cluster -f clusters/cluster2.yaml --profile adfs


5. in aws console go to security groups and allow all communication between the two clusters

6. set env variable
  CLUSTER1=<>@cluster1.us-east-1.eksctl.io
  CLUSTER2=<>@cluster2.us-east-1.eksctl.io

###
istio
###

8. self signed certs are checked in so you can skip the below steps if you want
(optional)
create a root ca
create two sub ca from this root

follow the line here:
https://istio.io/latest/docs/tasks/security/cert-management/plugin-ca-cert/


9. download the istioctl ( 1.14.4 )


10. installing the certs into istio-system before installing istio

k --context ${CLUSTER1} create ns istio-system
k --context ${CLUSTER2} create ns istio-system

kubectl --context="${CLUSTER1}" get namespace istio-system && \
  kubectl --context="${CLUSTER1}" label namespace istio-system topology.istio.io/network=network1

kubectl --context="${CLUSTER2}" get namespace istio-system && \
  kubectl --context="${CLUSTER2}" label namespace istio-system topology.istio.io/network=network2

kubectl --context="${CLUSTER1}" create secret generic cacerts -n istio-system       --from-file=certs/cluster1/ca-cert.pem --from-file=certs/cluster1/ca-key.pem       --from-file=certs/cluster1/root-cert.pem --from-file=certs/cluster1/cert-chain.pem

kubectl --context="${CLUSTER2}" create secret generic cacerts -n istio-system       --from-file=certs/cluster2/ca-cert.pem --from-file=certs/cluster2/ca-key.pem       --from-file=certs/cluster2/root-cert.pem --from-file=certs/cluster2/cert-chain.pem


 11. install istio now - dont forget to type y when prompted.

istioctl install -f istio/istio1.yaml --context "${CLUSTER1}"
istioctl install -f istio/istio2.yaml --context "${CLUSTER2}"

kubectl apply -f istio-ew-gw.yaml --context "${CLUSTER1}"
kubectl apply -f istio-ew-gw.yaml --context "${CLUSTER2}"

12. go to aws console, select the east west elb .. listeners ..then select the target group
for 15443.. and then go to attribute ..edit to remove the clinet ip preserve ( Preserve client IP addresses)


istioctl x create-remote-secret --context="${CLUSTER1}" --name=cluster1 | kubectl apply -f - --context="${CLUSTER2}"

istioctl x create-remote-secret --context="${CLUSTER2}" --name=cluster2 | kubectl apply -f - --context="${CLUSTER1}"


12. run the sample app  to verify


kubectl create --context="${CLUSTER1}" namespace sample
kubectl create --context="${CLUSTER2}" namespace sample

kubectl label --context="${CLUSTER1}" namespace sample \
    istio-injection=enabled
kubectl label --context="${CLUSTER2}" namespace sample \
    istio-injection=enabled

kubectl apply --context="${CLUSTER1}" \
    -f helloworld/helloworld.yaml \
    -l service=helloworld -n sample
kubectl apply --context="${CLUSTER2}" \
    -f helloworld/helloworld.yaml \
    -l service=helloworld -n sample

kubectl apply --context="${CLUSTER1}" \
    -f helloworld/helloworld.yaml \
    -l version=v1 -n sample

kubectl get pod --context="${CLUSTER1}" -n sample -l app=helloworld -w

kubectl apply --context="${CLUSTER2}" \
    -f helloworld/helloworld.yaml \
    -l version=v2 -n sample

kubectl get pod --context="${CLUSTER2}" -n sample -l app=helloworld -w


kubectl apply --context="${CLUSTER1}" \
    -f helloworld/sleep.yaml -n sample
kubectl apply --context="${CLUSTER2}" \
    -f helloworld/sleep.yaml -n sample


kubectl get pod --context="${CLUSTER1}" -n sample -l app=sleep

kubectl get pod --context="${CLUSTER2}" -n sample -l app=sleep

13. testing now

kubectl exec --context="${CLUSTER1}" -n sample -c sleep \
    "$(kubectl get pod --context="${CLUSTER1}" -n sample -l \
    app=sleep -o jsonpath='{.items[0].metadata.name}')" \
    -- curl -sS helloworld.sample:5000/hello

kubectl exec --context="${CLUSTER2}" -n sample -c sleep \
    "$(kubectl get pod --context="${CLUSTER2}" -n sample -l \
    app=sleep -o jsonpath='{.items[0].metadata.name}')" \
    -- curl -sS helloworld.sample:5000/hello




14. delete clusters


eksctl delete cluster --name=cluster1 --profile adfs
eksctl delete cluster --name=cluster2 --profile adfs
