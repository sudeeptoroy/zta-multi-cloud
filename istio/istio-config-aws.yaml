# apiVersion: install.istio.io/v1alpha1
apiVersion: operator.istio.io/v1alpha1
kind: IstioOperator
metadata:
  namespace: istio-system
spec:
  profile: default
  meshConfig:
    trustDomain: aws.com
  values:
    global:
      meshID: devup-mesh
      multiCluster:
        clusterName: aws-cluster
      network: aws-network
      imagePullPolicy: "Always"
      imagePullSecrets:
        - secret-registry
    sidecarInjectorWebhook:
      templates:
        spire: |
          spec:
            containers:
            - name: istio-proxy
              volumeMounts:
              - name: workload-socket
                mountPath: /run/secrets/workload-spiffe-uds
                readOnly: true
            volumes:
              - name: workload-socket
                csi:
                  driver: "csi.spiffe.io"
  components:
                #              env:
                #              - name: CA_PROVIDER
                #                value: "spiffe"
                #              - name: SPIFFE_ENDPOINT_SOCKET
                #                value: "unix:///run/spire/sockets/agent.sock"
                #              volumeMounts:
                #              - name: spire-agent-socket
                #                mountPath: /run/spire/sockets
                #                readOnly: true
    #    pilot:
    #      k8s:
    #        env:
    #          # Disable istiod CA Sever functionality
    #          - name: ENABLE_CA_SERVER
    #            value: "false"
    #          # Check that istio-agent's namespace and service account match the ones in the JWT token presented in the connection
    #          - name: PILOT_ENABLE_XDS_IDENTITY_CHECK
    #            value: "true"
    #          # Configure the SPIFFE Workload API as the cert provider for istiod
    #          - name: PILOT_CERT_PROVIDER
    #            value: "spiffe"
            #          - name: SPIFFE_ENDPOINT_SOCKET
            #            value: "unix:///run/spire/sockets/agent.sock"
            #        overlays:
            #          - apiVersion: apps/v1
            #            kind: Deployment
            #            name: istiod
            #            patches:
            #              - path: spec.template.spec.containers.[name:discovery].volumeMounts[name:workload-socket]
            #                value:
            #                  name: workload-socket
            #                  mountPath: "/run/secrets/workload-spiffe-uds"
            #                  readOnly: true
            #              - path: spec.template.spec.volumes[name:workload-socket]
            #                value:
            #                  name: workload-socket
            #                  csi:
            #                    driver: "csi.spiffe.io"
    ingressGateways:
      #      - name: istio-ingressgateway
      #        enabled: true
      #        label:
      #          istio: ingressgateway
      #        k8s:
      #          overlays:
      #            - apiVersion: apps/v1
      #              kind: Deployment
      #              name: istio-ingressgateway
      #              patches:
      #                - path: spec.template.spec.volumes[8]
      #                  value:
      #                    name: spire-agent-socket
      #                    csi:
      #                      driver: "csi.spiffe.io"
      #                - path: spec.template.spec.containers.[name:istio-proxy].volumeMounts[8]
      #                  value:
      #                    name: spire-agent-socket
      #                    mountPath: "/run/spire/sockets"
      #                    readOnly: true
      #          env:
      #            - name: CA_PROVIDER
      #              value: "spiffe"
      #            - name: SPIFFE_ENDPOINT_SOCKET
      #              value: "unix:///run/spire/sockets/agent.sock"
      - name: istio-ingressgateway
        enabled: true
        label:
          istio: ingressgateway
        k8s:
          podAnnotations:
            spiffe.io/federatesWith: "google.com"
          overlays:
            - apiVersion: apps/v1
              kind: Deployment
              name: istio-ingressgateway
              patches:
                - path: spec.template.spec.volumes[name:workload-socket]
                  value:
                    name: workload-socket
                    csi:
                      driver: "csi.spiffe.io"
                - path: spec.template.spec.containers.[name:istio-proxy].volumeMounts[name:workload-socket]
                  value:
                    name: workload-socket
                    mountPath: "/run/secrets/workload-spiffe-uds"
                    readOnly: true
                    #          env:
                    #            - name: CA_PROVIDER
                    #              value: "spiffe"
                    #            - name: SPIFFE_ENDPOINT_SOCKET
                    #              value: "unix:///run/spire/sockets/agent.sock"
      - name: istio-eastwestgateway
        enabled: true
        label:
          istio: eastwestgateway
          app: istio-eastwestgateway
          topology.istio.io/network: aws-network
        k8s:
          podAnnotations:
            spiffe.io/federatesWith: "google.com"
          overlays:
            - apiVersion: apps/v1
              kind: Deployment
              name: istio-eastwestgateway
              patches:
                - path: spec.template.spec.volumes[name:workload-socket]
                  value:
                    name: workload-socket
                    csi:
                      driver: "csi.spiffe.io"
                - path: spec.template.spec.containers.[name:istio-proxy].volumeMounts[name:workload-socket]
                  value:
                    name: "workload-socket"
                    mountPath: "/run/secrets/workload-spiffe-uds"
                    readOnly: true
          env:
            #            - name: CA_PROVIDER
            #              value: "spiffe"
            #            - name: SPIFFE_ENDPOINT_SOCKET
            #              value: "unix:///run/spire/sockets/agent.sock"
            - name: ISTIO_META_ROUTER_MODE
              value: "sni-dnat"
            - name: ISTIO_META_REQUESTED_NETWORK_VIEW
              value: aws-network
          service:
            ports:
              - name: status-port
                port: 15021
                targetPort: 15021
              - name: tls
                port: 15443
                targetPort: 15443
              - name: tls-istiod
                port: 15012
                targetPort: 15012
              - name: tls-webhook
                port: 15017
                targetPort: 15017
          serviceAnnotations:
            service.beta.kubernetes.io/aws-load-balancer-backend-protocol: "tcp"
            service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"
            service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
            #service.beta.kubernetes.io/aws-load-balancer-scheme: "internal"
            service.beta.kubernetes.io/aws-load-balancer-internal: "true"

            # These configurations fixed target group health checks
            service.beta.kubernetes.io/aws-load-balancer-healthcheck-port: "traffic-port"
            service.beta.kubernetes.io/aws-load-balancer-healthcheck-protocol: "tcp"
            service.beta.kubernetes.io/aws-load-balancer-proxy-protocol: "*"
